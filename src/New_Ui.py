# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'New_Ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# ==========IMPORTS========== #
from posixpath import split
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (
    QListWidget,
    QDialog,
    QApplication,
    QAction,
    QWidget,
    QCheckBox,
    QVBoxLayout,
    QLabel,
    QDesktopWidget,
    QSizePolicy,
)
from PyQt5.QtGui import QPixmap, QIcon, QImage, QCursor
import os.path
from string import Template
import os
import qrcode
import random
import string
import time
from pytube import YouTube, Playlist
import urllib
import requests
from configparser import ConfigParser
from concurrent import futures

# ============================#
# ====<Config>================#
config_path = "/home/garudalinux/Documents/Learning/Projects/Programing_Languages/python/Projects/gui/The_Manager/src/config/config.ini"
config = ConfigParser()
config.read(config_path)
# ====<Theme Config>=======================#
theme_path = "/home/garudalinux/Documents/Learning/Projects/Programing_Languages/python/Projects/gui/The_Manager/src/config/theme.ini"
theme = ConfigParser()
theme.read(theme_path)
# ====<Theme Manager>=====================#
# ===<Settings Button>======#
css_settings_button = """
            QPushButton {
                border-radius: 25px;
                background: #AD2121;
                padding: 20px;
                background-image: url(
        """
# settings_icon = theme["dracula"]["button_color"]
# settings_icon_css = css_settings_button + settings_icon + ");\n}"
# ===<Buttons>=============#
# ==========Examples==========#

# self.Example.setGeometry(QtCore.QRect(posX, posY, sizeX, sizeY))

# ==========Examples==========#
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(1129, 608)
        MainWindow.setFixedSize(1129, 608)
        # ===
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1131, 811))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        # ===
        self.Error_Log = QtWidgets.QLabel(self.centralwidget)
        self.Error_Log.setGeometry(QtCore.QRect(10, 520, 271, 18))
        self.Error_Log.setObjectName("Error_Log")
        # ===========Account Saver Tab===================
        # ===
        self.Add_Account_Button = QtWidgets.QPushButton(self.tab)
        self.Add_Account_Button.setGeometry(QtCore.QRect(10, 210, 88, 34))
        self.Add_Account_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Add_Account_Button.setObjectName("Add_Account_Button")
        # ===
        self.Delete_Button = QtWidgets.QPushButton(self.tab)
        self.Delete_Button.setGeometry(QtCore.QRect(100, 210, 88, 34))
        self.Delete_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Delete_Button.setObjectName("Delete_Button")
        # ===
        self.Reload_Button = QtWidgets.QPushButton(self.tab)
        self.Reload_Button.setGeometry(QtCore.QRect(190, 210, 88, 34))
        self.Reload_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Reload_Button.setObjectName("Reload_Button")
        # ===
        self.Saved_Account_List = QtWidgets.QListWidget(self.tab)
        self.Saved_Account_List.itemPressed.connect(self.item_selected)
        self.Saved_Account_List.setGeometry(QtCore.QRect(10, 260, 271, 192))
        self.Saved_Account_List.setSortingEnabled(True)
        self.Saved_Account_List.setObjectName("Saved_Account_List")
        # ===
        self.View_Account_Information = QtWidgets.QListWidget(self.tab)
        self.View_Account_Information.setGeometry(QtCore.QRect(300, 260, 450, 192))
        self.View_Account_Information.setObjectName("View_Account_Information")
        # ===
        self.Edit_Button = QtWidgets.QPushButton(self.tab)
        self.Edit_Button.setGeometry(QtCore.QRect(300, 210, 88, 34))
        self.Edit_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Edit_Button.setObjectName("Edit_Button")
        # ===
        self.gridLayoutWidget = QtWidgets.QWidget(self.tab)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 0, 481, 201))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        # ===
        self.Username = QtWidgets.QTextEdit(self.gridLayoutWidget)
        self.Username.setObjectName("Username")
        self.Username.setEnabled(False)
        self.gridLayout.addWidget(self.Username, 1, 0, 1, 1)
        # ===
        self.Email = QtWidgets.QTextEdit(self.gridLayoutWidget)
        self.Email.setObjectName("Email")
        self.gridLayout.addWidget(self.Email, 2, 0, 1, 1)
        # ===
        self.Password = QtWidgets.QTextEdit(self.gridLayoutWidget)
        self.Password.setObjectName("Password")
        self.gridLayout.addWidget(self.Password, 3, 0, 1, 1)
        # ===
        self.Account_Name = QtWidgets.QTextEdit(self.gridLayoutWidget)
        self.Account_Name.setObjectName("Account_Name")
        self.gridLayout.addWidget(self.Account_Name, 0, 0, 1, 1)
        # ===
        self.Username_CheckBox = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.Username_CheckBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Username_CheckBox.setObjectName("Username_CheckBox")
        # self.Username_CheckBox.setEnabled(False)
        self.gridLayout.addWidget(self.Username_CheckBox, 1, 1, 1, 1)
        # ===============End=========================
        # ====
        # ===============QRGenerator tab=============
        # ===
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        # ===
        self.Generate_QRCode_Button = QtWidgets.QPushButton(self.tab_2)
        self.Generate_QRCode_Button.setGeometry(QtCore.QRect(10, 10, 141, 34))
        self.Generate_QRCode_Button.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        )
        self.Generate_QRCode_Button.setObjectName("Generate_QRCode_Button")
        # ===
        self.Name_QRCode = QtWidgets.QTextEdit(self.tab_2)
        self.Name_QRCode.setGeometry(QtCore.QRect(160, 10, 741, 32))
        self.Name_QRCode.setObjectName("Name_QRCode")
        # ===
        self.Link_QRCode = QtWidgets.QTextEdit(self.tab_2)
        self.Link_QRCode.setGeometry(QtCore.QRect(160, 50, 741, 32))
        self.Link_QRCode.setObjectName("Link_QRCode")
        # ===
        self.QRCode = QtWidgets.QLabel(self.tab_2)
        self.QRCode.setGeometry(QtCore.QRect(160, 100, 410, 410))
        self.QRCode.setObjectName("QRCode")
        # ===
        # =======End=============================
        # ====
        # =======Password Generator Tab==========
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        # ===
        self.Password_Generator_Button = QtWidgets.QPushButton(self.tab_3)
        self.Password_Generator_Button.setGeometry(QtCore.QRect(10, 10, 141, 34))
        self.Password_Generator_Button.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        )
        self.Password_Generator_Button.setObjectName("Password_Generator_Button")
        # ===
        self.Save_Password_Button = QtWidgets.QPushButton(self.tab_3)
        self.Save_Password_Button.setGeometry(QtCore.QRect(10, 50, 141, 34))
        self.Save_Password_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Save_Password_Button.setObjectName("Save_Password_Button")
        # ===
        self.Pick_Password_Text_Box = QtWidgets.QTextEdit(self.tab_3)
        self.Pick_Password_Text_Box.setGeometry(QtCore.QRect(160, 10, 361, 32))
        self.Pick_Password_Text_Box.setObjectName("Pick_Password_Text_Box")
        self.Pick_Password_Text_Box.setReadOnly(True)
        # ===
        self.Numerical_CheckBox = QtWidgets.QCheckBox(self.tab_3)
        self.Numerical_CheckBox.setGeometry(QtCore.QRect(280, 50, 61, 22))
        self.Numerical_CheckBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Numerical_CheckBox.setObjectName("Numerical_CheckBox")
        # ===
        self.SpecialCharacters_CheckBox = QtWidgets.QCheckBox(self.tab_3)
        self.SpecialCharacters_CheckBox.setGeometry(QtCore.QRect(230, 50, 41, 22))
        self.SpecialCharacters_CheckBox.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        )
        self.SpecialCharacters_CheckBox.setObjectName("SpecialCharacters_CheckBox")
        # ===
        self.Password_Characters_Size = QtWidgets.QSpinBox(self.tab_3)
        self.Password_Characters_Size.setGeometry(QtCore.QRect(530, 10, 52, 32))
        self.Password_Characters_Size.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        )
        self.Password_Characters_Size.setMinimum(8)
        self.Password_Characters_Size.setObjectName("Password_Characters_Size")
        # ===
        self.UpperCase_Letters = QtWidgets.QCheckBox(self.tab_3)
        self.UpperCase_Letters.setGeometry(QtCore.QRect(160, 50, 61, 22))
        self.UpperCase_Letters.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.UpperCase_Letters.setObjectName("UpperCase_Letters")
        # ===
        self.Only_UpperCase_Letters = QtWidgets.QCheckBox(self.tab_3)
        self.Only_UpperCase_Letters.setGeometry(QtCore.QRect(400, 50, 90, 22))
        self.Only_UpperCase_Letters.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor)
        )
        self.Only_UpperCase_Letters.setObjectName("Only_UpperCase_Letters")
        # ===
        self.LowerCase_Letters = QtWidgets.QCheckBox(self.tab_3)
        self.LowerCase_Letters.setGeometry(QtCore.QRect(340, 50, 90, 22))
        self.LowerCase_Letters.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.LowerCase_Letters.setObjectName("LowerCase_Letters")
        self.LowerCase_Letters.setEnabled(False)
        # ===
        self.tabWidget.addTab(self.tab_3, "")
        # =====End========================================
        # ====
        # =====Youtube Video And Audio Downloader Tab=====
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        # ===
        self.Search_Button = QtWidgets.QPushButton(self.tab_4)
        self.Search_Button.setGeometry(QtCore.QRect(90, 10, 88, 34))
        self.Search_Button.setObjectName("Search_Button")
        # ===
        self.Download_Button = QtWidgets.QPushButton(self.tab_4)
        self.Download_Button.setGeometry(QtCore.QRect(0, 10, 88, 34))
        self.Download_Button.setObjectName("Download_Button")
        # ===
        self.Link_Graber = QtWidgets.QTextEdit(self.tab_4)
        self.Link_Graber.setGeometry(QtCore.QRect(180, 10, 431, 34))
        self.Link_Graber.setObjectName("Link_Graber")
        # ===
        self.Video_Title = QtWidgets.QLabel(self.tab_4)
        self.Video_Title.setGeometry(QtCore.QRect(5, 210, 300, 34))
        self.Video_Title.setText("")
        self.Video_Title.setObjectName("Video_Title")
        self.Video_Title.setWordWrap(True)
        # ===
        self.Video_Thumdail = QtWidgets.QLabel(self.tab_4)
        self.Video_Thumdail.setGeometry(QtCore.QRect(5, 50, 278, 156))
        self.Video_Thumdail.setText("")
        self.Video_Thumdail.setObjectName("Video_Thumdail")
        self.Video_Thumdail.setScaledContents(True)
        # ===
        self.Video_CheckBox = QtWidgets.QCheckBox(self.tab_4)
        self.Video_CheckBox.setGeometry(QtCore.QRect(0, 310, 88, 22))
        self.Video_CheckBox.setObjectName("Video_CheckBox")
        # ===
        self.Video_Resolution = QtWidgets.QComboBox(self.tab_4)
        self.Video_Resolution.setGeometry(QtCore.QRect(0, 340, 87, 32))
        self.Video_Resolution.setObjectName("Video_Resolution")
        self.Video_Resolution.setEnabled(False)
        # ===
        self.Video_Format = QtWidgets.QComboBox(self.tab_4)
        self.Video_Format.setGeometry(QtCore.QRect(90, 340, 87, 32))
        self.Video_Format.setObjectName("Video_Format")
        self.Video_Format.setEnabled(False)
        # ===
        self.Video_Bitrate = QtWidgets.QComboBox(self.tab_4)
        self.Video_Bitrate.setGeometry(QtCore.QRect(180, 340, 87, 32))
        self.Video_Bitrate.setObjectName("Video_Bitrate")
        self.Video_Bitrate.setEnabled(False)
        # ===
        self.Playlist_Checkbox = QtWidgets.QCheckBox(self.tab_4)
        self.Playlist_Checkbox.setGeometry(QtCore.QRect(0, 290, 88, 22))
        self.Playlist_Checkbox.setObjectName("Playlist_Checkbox")
        # ===
        self.Audio_CheckBox = QtWidgets.QCheckBox(self.tab_4)
        self.Audio_CheckBox.setGeometry(QtCore.QRect(0, 380, 88, 22))
        self.Audio_CheckBox.setObjectName("Audio_CheckBox")
        # ===
        self.Audio_Format = QtWidgets.QComboBox(self.tab_4)
        self.Audio_Format.setGeometry(QtCore.QRect(0, 408, 87, 32))
        self.Audio_Format.setObjectName("Audio_Format")
        self.Audio_Format.setEnabled(False)
        # ===
        self.Audio_Bitrate = QtWidgets.QComboBox(self.tab_4)
        self.Audio_Bitrate.setGeometry(QtCore.QRect(90, 408, 87, 32))
        self.Audio_Bitrate.setObjectName("Audio_Bitrate")
        self.Audio_Bitrate.setEnabled(False)
        # ===
        self.Playlist_View = QtWidgets.QListView(self.tab_4)
        self.Playlist_View.setGeometry(QtCore.QRect(615, 10, 500, 500))
        self.Playlist_View.setObjectName("Playlist_View")
        # ===
        self.tabWidget.addTab(self.tab_4, "")
        # =========End=============================================
        # ====
        # ==========Forza Horizon Drift Suspension Calculator======
        # self.tab_5 = QtWidgets.QWidget()
        # self.tab_5.setObjectName("tab_5")
        # self.tabWidget.addTab(self.tab_5, "")
        # ===
        # ==========End
        MainWindow.setCentralWidget(self.centralwidget)
        # ===
        self.Settings_Button_MenuBar = QtWidgets.QPushButton(MainWindow)
        self.Settings_Button_MenuBar.setGeometry(QtCore.QRect(1000, 0, 30, 28))
        self.Settings_Button_MenuBar.setObjectName("Settings_Button_MenuBar")
        # self.Settings_Button_MenuBar.setStyleSheet(settings_icon_css)
        self.Settings_Button_MenuBar.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        # ===
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # ===
        # Buttons actions
        self.Add_Account_Button.clicked.connect(self.save_it)
        self.Delete_Button.clicked.connect(self.delete_it)
        self.Reload_Button.clicked.connect(self.reload_it)
        self.Edit_Button.clicked.connect(self.edit_it)
        self.Generate_QRCode_Button.clicked.connect(self.Generate_QRCode)
        self.Password_Generator_Button.clicked.connect(self.Generate_Password)
        self.Save_Password_Button.clicked.connect(self.Save_Password)
        self.Download_Button.clicked.connect(self.Download)
        self.Search_Button.clicked.connect(self.Search)
        # ===
        # CheckBoxes
        self.Username_CheckBox.stateChanged.connect(
            lambda: self.checked(self.Username_CheckBox)
        )
        self.Only_UpperCase_Letters.stateChanged.connect(
            lambda: self.Only_UpperCase_Checked(self.Only_UpperCase_Letters)
        )
        self.Video_CheckBox.stateChanged.connect(
            lambda: self.Video_checked(self.Video_CheckBox)
        )
        self.Audio_CheckBox.stateChanged.connect(
            lambda: self.Audio_Checked(self.Audio_CheckBox)
        )
        self.Playlist_Checkbox.stateChanged.connect(
            lambda: self.Playlist_Checked(self.Playlist_Checkbox)
        )
        # ===
        # ComboBoxes
        self.Audio_Format.currentIndexChanged.connect(self.Audio_Format_Item_Changed)
        self.Video_Resolution.currentIndexChanged.connect(
            self.Video_Format_Item_Changed
        )
        self.Video_Format.currentIndexChanged.connect(self.Video_Bitrate_Item_Changed)

        # ===

    # ========<Start of tab 1>=====================================================
    # ====
    # =============================================================================

    def edit_it(self):
        item = self.Saved_Account_List.currentItem()
        item_name = item.text()
        path = config["paths"]["default_account_saver_folder"]
        selected_item_path = path + item_name
        os.system("%s %s" % (os.getenv("EDITOR"), selected_item_path))

    # =============================================================================

    def checked(self, btn):

        if btn.isChecked() is True:
            self.Username.setEnabled(True)
        else:
            self.Username.setEnabled(False)

    # =============================================================================

    def settings_window(self):
        self.Settings = QtWidgets.QWidget()
        self.ui = Ui_Settings()
        self.ui.setupUi(self.Settings)
        self.Settings.show()

    # ==================================================================================

    def item_selected(self):
        item = self.Saved_Account_List.currentItem()
        item_text = item.text()
        length = self.View_Account_Information.count()
        # print(item.text())
        if item_text.endswith(".txt"):
            item_name = item.text()
            path = (
                "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/accounts/"
                + item_name
            )
            f = open(path, "r")
            self.View_Account_Information.insertItem(0, f.read())
            f.close()
            if length == 1:
                self.View_Account_Information.takeItem(1)
        else:
            item_name = item.text() + ".txt"
            path = (
                "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/accounts/"
                + item_name
            )
            f = open(path, "r")
            self.View_Account_Information.insertItem(0, f.read())
            f.close()
            if length == 1:
                self.View_Account_Information.takeItem(1)

    # ==================================================================================

    def save_it(self):
        # grabs the text from the text box
        account_name = self.Account_Name.toPlainText()
        account_email = self.Email.toPlainText()
        account_password = self.Password.toPlainText()
        account_username = self.Username.toPlainText()

        informations_without_username = {
            "site": account_name,
            "email": account_email,
            "password": account_password,
        }

        informations_with_username = {
            "site": account_name,
            "username": account_username,
            "email": account_email,
            "password": account_password,
        }
        name = account_name + ".txt"
        path = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/accounts"
        path_to_template_without_username = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/bin/Without_Username_Template.txt"
        path_to_template_with_username = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/bin/With_Username_Template.txt"
        name_and_path = os.path.join(path, name)
        account = str(informations_without_username)
        # add it to the list and create the text file to store the data

        def file():

            check_box_verification = self.Username_CheckBox.isChecked()
            if os.path.exists(name_and_path):
                self.Error_Log.setText("Account already exists")
            else:
                self.Saved_Account_List.addItem(account_name)
                if check_box_verification is True:
                    if file:
                        with open(path_to_template_with_username, "r") as f:
                            src = Template(f.read())
                            result = src.substitute(informations_with_username)
                            text = open(name_and_path, "x")
                            text.write(result)
                            text.close()
                else:
                    if file:
                        with open(path_to_template_without_username, "r") as f:
                            src = Template(f.read())
                            result = src.substitute(informations_without_username)
                            text = open(name_and_path, "x")
                            text.write(result)
                            text.close()

            # clear the text box

        file()
        self.Account_Name.setText("")
        self.Username.setText("")
        self.Email.setText("")
        self.Password.setText("")

    # ==================================================================================
    def reload_it(self):
        check = os.listdir(
            "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/accounts/"
        )
        check_string = check
        # for file in check:
        # self.Saved_Account_List.addItem(file)
        for file in check:
            if not self.Saved_Account_List.findItems(
                file, QtCore.Qt.MatchFixedString | QtCore.Qt.MatchCaseSensitive
            ):
                self.Saved_Account_List.addItem(file)

    # ==================================================================================

    def delete_it(self):
        # selected row
        selected_item = self.Saved_Account_List.currentItem()
        clicked = self.Saved_Account_List.currentRow()
        # deleting the row
        self.Saved_Account_List.takeItem(clicked)
        path = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/accounts/"
        account_name = selected_item.text()
        file_name = path + account_name
        if os.path.exists(file_name):
            os.remove(file_name)

    # ====<End of tab 1>===========================================================
    # ====
    # ====<Start of tab 2>=========================================================
    def Generate_QRCode(self):
        name = self.Name_QRCode.toPlainText()
        name_png = name + ".png"
        link = self.Link_QRCode.toPlainText()
        path = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/qrcodes/"
        save_folder = path + name_png
        # ===basic generator
        # img = qrcode.make(link)
        # type(img)
        # img.save(save_folder)
        # ===end of basic generator
        # ===advanced generator
        qr = qrcode.QRCode(
            version=4,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(link)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")
        img.save(save_folder)
        self.Name_QRCode.setText("")
        self.Link_QRCode.setText("")
        # ===end of advanced generator
        # ===shows the qr code in label
        self.QRCode.setPixmap(QtGui.QPixmap(save_folder))

    # ====<End of tab 2>===========================================================
    # ====
    # ====<Start of tab 3>=========================================================

    # ===
    def Only_UpperCase_Checked(self, btn):

        if btn.isChecked() is True:
            self.LowerCase_Letters.setEnabled(True)
        else:
            self.LowerCase_Letters.setEnabled(False)

    # ===
    def Generate_Password(self):
        numerical_case = self.Numerical_CheckBox.isChecked()
        symbols_case = self.SpecialCharacters_CheckBox.isChecked()
        upper_case = self.UpperCase_Letters.isChecked()
        lower_case = self.LowerCase_Letters.isChecked()
        only_upper_case = self.Only_UpperCase_Letters.isChecked()
        # ===
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase
        numbers = string.digits
        symbols = string.punctuation
        length = self.Password_Characters_Size.value()
        # ===
        if only_upper_case is True:
            if numerical_case is True:
                if symbols_case is True:
                    if lower_case is True:
                        Upper_Lower_Numerical_symbols = (
                            upper + lower + numbers + symbols
                        )
                        password_content = random.sample(
                            Upper_Lower_Numerical_symbols, length
                        )
                        Upper_Lower_Numerical_symbols_Password = "".join(
                            password_content
                        )
                        self.Pick_Password_Text_Box.setText(
                            Upper_Lower_Numerical_symbols_Password
                        )
                    else:
                        Upper_Numerical_Symbols = upper + numbers + symbols
                        password_content = random.sample(
                            Upper_Numerical_Symbols, length
                        )
                        Upper_Numerical_Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(
                            Upper_Numerical_Symbols_Password
                        )
                else:
                    Upper_Numerical = upper + numbers
                    password_content = random.sample(Upper_Numerical, length)
                    Upper_Numerical_Password = "".join(password_content)
                    self.Pick_Password_Text_Box.setText(Upper_Numerical_Password)
            else:
                if symbols_case is True:
                    if lower_case is True:
                        Upper_Lower_Symbols = upper + lower + symbols
                        password_content = random.sample(Upper_Lower_Symbols, length)
                        Upper_Lower_Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(
                            Upper_Lower_Symbols_Password
                        )
                    else:
                        Upper_Symbols = upper + symbols
                        password_content = random.sample(Upper_Symbols, length)
                        Upper_Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Upper_Symbols_Password)
                else:
                    if lower_case is True:
                        Upper_Lower = upper + lower
                        password_content = random.sample(Upper_Lower, length)
                        Upper_Lower_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Upper_Lower_Password)
                    else:
                        Upper = upper
                        password_content = random.sample(Upper, length)
                        Upper_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Upper_Password)
        else:
            if upper_case is True:
                if numerical_case is True:
                    if symbols_case is True:
                        if lower_case is True:
                            Upper_Lower_Numerical_symbols = (
                                upper + lower + numbers + symbols
                            )
                            password_content = random.sample(
                                Upper_Lower_Numerical_symbols, length
                            )
                            Upper_Lower_Numerical_symbols_Password = "".join(
                                password_content
                            )
                            self.Pick_Password_Text_Box.setText(
                                Upper_Lower_Numerical_symbols_Password
                            )
                    else:
                        Upper_Numerical_Symbols = upper + numbers + lower
                        password_content = random.sample(
                            Upper_Numerical_Symbols, length
                        )
                        Upper_Numerical_Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(
                            Upper_Numerical_Symbols_Password
                        )
                else:
                    if symbols_case is True:
                        if lower_case is True:
                            Upper_Lower_Symbols = upper + lower + symbols
                            password_content = random.sample(
                                Upper_Lower_Symbols, length
                            )
                            Upper_Lower_Symbols_Password = "".join(password_content)
                            self.Pick_Password_Text_Box.setText(
                                Upper_Lower_Symbols_Password
                            )
                        else:
                            Upper_Symbols = upper + symbols
                            password_content = random.sample(Upper_Symbols, length)
                            Upper_Symbols_Password = "".join(password_content)
                            self.Pick_Password_Text_Box.setText(Upper_Symbols_Password)
                    else:
                        if lower_case is True:
                            Upper_Lower = upper + lower
                            password_content = random.sample(Upper_Lower, length)
                            Upper_Lower_Password = "".join(password_content)
                            self.Pick_Password_Text_Box.setText(Upper_Lower_Password)
                        else:
                            Upper = upper + lower
                            password_content = random.sample(Upper, length)
                            Upper_Password = "".join(password_content)
                            self.Pick_Password_Text_Box.setText(Upper_Password)
            else:
                if numerical_case is True:
                    if symbols_case is True:
                        Numerical_Symbols = lower + numbers + symbols
                        password_content = random.sample(Numerical_Symbols, length)
                        Numerical_Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Numerical_Symbols_Password)
                    else:
                        Numerical = lower + numbers
                        password_content = random.sample(Numerical, length)
                        Numerical_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Numerical_Password)
                else:
                    if symbols_case is True:
                        Symbols = lower + symbols
                        password_content = random.sample(Symbols, length)
                        Symbols_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Symbols_Password)
                    else:
                        Lower = lower
                        password_content = random.sample(Lower, length)
                        Lower_Password = "".join(password_content)
                        self.Pick_Password_Text_Box.setText(Lower_Password)

    # ===
    def Save_Password(self):
        date = time.asctime()
        path = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/saved resources/saved_passwords/"
        template = "/home/robi/Documents/School related/my projects/python/gui/My Program/data/bin/passwords_template"
        password = self.Pick_Password_Text_Box.toPlainText()
        # ===
        fancy_saved_passwords = {"date": date, "password": password}
        # ===
        name_and_path = path + date
        with open(template, "r") as f:
            src = Template(f.read())
            result = src.substitute(fancy_saved_passwords)
            text = open(name_and_path, "x")
            text.write(result)
            text.close()
        # ===

    # ===
    # ====<End of tab 3>===========================================================
    # ====
    # ===<Start of tab 4>==========================================================
    # ===
    def Video_checked(self, btn):

        if btn.isChecked() is True:
            self.Video_Resolution.setEnabled(True)
            self.Video_Format.setEnabled(True)
            self.Video_Bitrate.setEnabled(True)
            link = self.Link_Graber.toPlainText()
            yt = YouTube(link)
            stream_video = yt.streams.filter(
                progressive=True,
            )
            clear_video_resolution_box = self.Video_Resolution.count()
            if clear_video_resolution_box == 0:
                for i in stream_video:
                    resolutions = i.resolution
                    self.Video_Resolution.addItem(resolutions)
                else:
                    self.Video_Resolution.clear()
                    for i in stream_video:
                        resolutions = i.resolution
                        self.Video_Resolution.addItem(resolutions)
        else:
            self.Video_Resolution.setEnabled(False)
            self.Video_Format.setEnabled(False)
            self.Video_Bitrate.setEnabled(False)

    def Audio_Checked(self, btn):
        if btn.isChecked() is True:
            self.Audio_Format.setEnabled(True)
            self.Audio_Bitrate.setEnabled(True)
            link = self.Link_Graber.toPlainText()
            yt = YouTube(link)
            stream_audio = yt.streams.filter(adaptive=True, only_audio=True)
            clear_audio_format_box = self.Audio_Format.count()
            if clear_audio_format_box == 0:
                for i in stream_audio:
                    format = i.subtype
                    self.Audio_Format.addItem(format)
            else:
                self.Audio_Format.clear()
                for i in stream_audio:
                    format = i.subtype
                    self.Audio_Format.addItem(format)
        else:
            self.Audio_Format.setEnabled(False)
            self.Audio_Bitrate.setEnabled(False)

    def Playlist_Checked(self, btn):
        # link = self.Link_Graber.toPlainText()
        # playlist = Playlist(link)
        # videos_links = playlist.video_urls()
        # if btn.isChecked() is True:
        # for url in playlist.video_urls():
        # print(url)
        pass

    # ===
    def Video_Format_Item_Changed(self):
        link = self.Link_Graber.toPlainText()
        yt_video_format = YouTube(link)
        video_quality = self.Video_Resolution.currentText()
        stream_video = yt_video_format.streams.filter(
            progressive=True, resolution=video_quality
        )
        self.Video_Format.clear()
        for i in stream_video:
            format = i.subtype
            self.Video_Format.addItem(format)

    def Video_Bitrate_Item_Changed(self):
        link = self.Link_Graber.toPlainText()
        yt_video_bitrate = YouTube(link)
        video_quality = self.Video_Resolution.currentText()
        video_format = self.Video_Format.currentText()
        stream_video = yt_video_bitrate.streams.filter(
            progressive=True,
            resolution=video_quality,
            subtype=video_format,
        )
        self.Video_Bitrate.clear()
        for i in stream_video:
            bitrate = i.abr
            self.Video_Bitrate.addItem(bitrate)

    def Audio_Format_Item_Changed(self):
        link = self.Link_Graber.toPlainText()
        yt_format = YouTube(link)
        clear_audio_bitrate_box = self.Audio_Bitrate.count()
        audio_format = self.Audio_Format.currentText()
        stream_audio = yt_format.streams.filter(
            adaptive=True, only_audio=True, file_extension=audio_format
        )
        self.Audio_Bitrate.clear()
        for i in stream_audio:
            bitrate = i.abr
            self.Audio_Bitrate.addItem(bitrate)

    # ===
    def Download(self):
        # ===Video
        link = self.Link_Graber.toPlainText()
        path_video = "/home/garudalinux/Documents/School related/my projects/python/gui/My Program/data/saved resources/YouTube_Downloader/Videos/"
        path_video_playlist = "/home/garudalinux/Documents/School related/my projects/python/gui/My Program/data/saved resources/YouTube_Downloader/Video_Playlists"
        video_resolution = self.Video_Resolution.currentText()
        video_format = self.Video_Format.currentText()
        video_bitrate = self.Video_Bitrate.currentText()
        video_checkbox = self.Video_CheckBox.isChecked()
        video_playlist_checkbox = self.Video_CheckBox.isChecked()
        # ===Audio
        audio_checkbox = self.Audio_CheckBox.isChecked()
        path_audio = "/home/garudalinux/Documents/School related/my projects/python/gui/My Program/data/saved resources/YouTube_Downloader/Audios/"
        path_audio_playlist = "/home/garudalinux/Documents/School related/my projects/python/gui/My Program/data/saved resources/YouTube_Downloader/Audio_Playlists/"
        audio_format = self.Audio_Format.currentText()
        audio_bitrate = self.Audio_Bitrate.currentText()
        audio_playlist_checkbox = self.Audio_CheckBox.isChecked()

        # ===Download

        yt = YouTube(link)
        p = Playlist(link)
        if video_checkbox is True:
            if video_playlist_checkbox is True:
                for video in p.videos:
                    video.streams.first().download()

            else:
                stream = yt.streams.filter(
                    progressive=True,
                    file_extension=video_format,
                    resolution=video_resolution,
                    bitrate=video_bitrate,
                ).first()
                stream.download(path_video)
        else:
            if audio_checkbox is True:
                if audio_playlist_checkbox is True:
                    for video in p.videos:
                        stream = video.streams.filter(
                            only_audio=True,
                            file_extension=audio_format,
                            bitrate=audio_bitrate,
                        )
                        stream[0].download(path_audio_playlist)
                else:
                    stream = yt.streams.filter(
                        only_audio=True,
                        file_extension=audio_format,
                        bitrate=audio_bitrate,
                    ).first()
                    out_file = stream.download(output_path=path_audio)
                    base, ext = os.path.splitext(out_file)
                    new_file = base + "." + audio_format
                    os.rename(out_file, new_file)

    # ===
    def Search(self):
        link = self.Link_Graber.toPlainText()
        yt = YouTube(link)
        title = yt.title
        thumdail = yt.thumbnail_url
        image = QImage()
        image.loadFromData(requests.get(thumdail).content)
        self.Video_Thumdail.setPixmap(QPixmap(image))
        self.Video_Title.setText(title)

    # ===<End of tab 4>============================================================
    # ====
    # =============================================================================

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # ===Tab 1
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Account Saver")
        )
        self.Add_Account_Button.setText(_translate("MainWindow", "Add Account"))
        self.Error_Log.setText(_translate("MainWindow", ""))
        self.Delete_Button.setText(_translate("MainWindow", "Delete"))
        self.Reload_Button.setText(_translate("MainWindow", "Reload"))
        self.Edit_Button.setText(_translate("MainWindow", "Edit"))
        self.Username.setPlaceholderText(_translate("MainWindow", "Username"))
        self.Email.setPlaceholderText(_translate("MainWindow", "Email"))
        self.Password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.Account_Name.setPlaceholderText(_translate("MainWindow", "Account Name"))
        self.Username_CheckBox.setText(_translate("MainWindow", "Username"))
        # ===Tab 2
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_2),
            _translate("MainWindow", "QRCode generator"),
        )
        self.Link_QRCode.setPlaceholderText(_translate("MainWindow", "Link"))
        self.Name_QRCode.setPlaceholderText(_translate("MainWindow", "Name"))
        self.Generate_QRCode_Button.setText(_translate("MainWindow", "Generate QRCode"))
        # ===Tab 3
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_3),
            _translate("MainWindow", "Password Generator"),
        )
        self.Password_Generator_Button.setText(
            _translate("MainWindow", "Generate Password")
        )
        self.Numerical_CheckBox.setText(_translate("MainWindow", "1234"))
        self.SpecialCharacters_CheckBox.setText(_translate("MainWindow", "?!.,"))
        self.UpperCase_Letters.setText(_translate("MainWindow", "ABCD"))
        self.Only_UpperCase_Letters.setText(_translate("MainWindow", "Only ABCD"))
        self.LowerCase_Letters.setText(_translate("MainWindow", "abcd"))
        self.Save_Password_Button.setText(_translate("MainWindow", "Save Password"))
        # ===Tab 4
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_4),
            _translate("MainWindow", "Youtube Downloader"),
        )
        self.Search_Button.setText(_translate("MainWindow", "Search"))
        self.Download_Button.setText(_translate("MainWindow", "Download"))
        self.Link_Graber.setHtml(
            _translate(
                "MainWindow",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'Noto Sans'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
                '<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>',
            )
        )
        self.Video_CheckBox.setText(_translate("MainWindow", "Video"))
        self.Playlist_Checkbox.setText(_translate("MainWindow", "Playlist"))
        self.Audio_CheckBox.setText(_translate("MainWindow", "Audio"))
        # ===Tab 5
        # self.tabWidget.setTabText(
        #   self.tabWidget.indexOf(self.tab_5),
        #   _translate("MainWindow", "Forza Horizon Drift Suspension Calculator"),
        # )
        # ===Menu Bar

        # ===


# ====<Settings window>==================================#
class Ui_Settings(object):
    def setupUi(self, Settings):
        Settings.setObjectName("Settings")
        Settings.resize(650, 468)
        self.tabWidget = QtWidgets.QTabWidget(Settings)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 651, 461))
        self.tabWidget.setObjectName("tabWidget")
        self.Paths = QtWidgets.QWidget()
        self.Paths.setObjectName("Paths")
        self.Paths_Close_Button = QtWidgets.QPushButton(self.Paths)
        self.Paths_Close_Button.setGeometry(QtCore.QRect(550, 390, 88, 28))
        self.Paths_Close_Button.setObjectName("Paths_Close_Button")
        self.Paths_Save_Button = QtWidgets.QPushButton(self.Paths)
        self.Paths_Save_Button.setGeometry(QtCore.QRect(460, 390, 88, 28))
        self.Paths_Save_Button.setObjectName("Paths_Save_Button")
        self.Account_Manager_Path = QtWidgets.QPushButton(self.Paths)
        self.Account_Manager_Path.setGeometry(QtCore.QRect(0, 0, 88, 28))
        self.Account_Manager_Path.setObjectName("Account_Manager_Path")
        self.Password_Generator_Path_Button = QtWidgets.QPushButton(self.Paths)
        self.Password_Generator_Path_Button.setGeometry(QtCore.QRect(0, 30, 88, 28))
        self.Password_Generator_Path_Button.setToolTip("")
        self.Password_Generator_Path_Button.setObjectName(
            "Password_Generator_Path_Button"
        )
        self.QRCode_Generator_Path_Button = QtWidgets.QPushButton(self.Paths)
        self.QRCode_Generator_Path_Button.setGeometry(QtCore.QRect(0, 60, 88, 28))
        self.QRCode_Generator_Path_Button.setObjectName("QRCode_Generator_Path_Button")
        self.Youtube_Downloader_Path_Button = QtWidgets.QPushButton(self.Paths)
        self.Youtube_Downloader_Path_Button.setGeometry(QtCore.QRect(0, 90, 88, 28))
        self.Youtube_Downloader_Path_Button.setObjectName(
            "Youtube_Downloader_Path_Button"
        )
        self.Account_Manager_pathtofile = QtWidgets.QTextEdit(self.Paths)
        self.Account_Manager_pathtofile.setGeometry(QtCore.QRect(90, 0, 541, 28))
        self.Account_Manager_pathtofile.setObjectName("Account_Manager_pathtofile")
        self.Password_Generator_pathtofile = QtWidgets.QTextEdit(self.Paths)
        self.Password_Generator_pathtofile.setGeometry(QtCore.QRect(90, 30, 541, 28))
        self.Password_Generator_pathtofile.setObjectName(
            "Password_Generator_pathtofile"
        )
        self.QRCode_Generator_pathtofile = QtWidgets.QTextEdit(self.Paths)
        self.QRCode_Generator_pathtofile.setGeometry(QtCore.QRect(90, 60, 541, 28))
        self.QRCode_Generator_pathtofile.setObjectName("QRCode_Generator_pathtofile")
        self.Youtube_Downloader_pathtofile = QtWidgets.QTextEdit(self.Paths)
        self.Youtube_Downloader_pathtofile.setGeometry(QtCore.QRect(90, 90, 541, 28))
        self.Youtube_Downloader_pathtofile.setObjectName(
            "Youtube_Downloader_pathtofile"
        )
        self.tabWidget.addTab(self.Paths, "")
        self.Background = QtWidgets.QWidget()
        self.Background.setObjectName("Background")
        self.Background_Close_Button = QtWidgets.QPushButton(self.Background)
        self.Background_Close_Button.setGeometry(QtCore.QRect(550, 390, 88, 28))
        self.Background_Close_Button.setObjectName("Background_Close_Button")
        self.Background_Save_Button = QtWidgets.QPushButton(self.Background)
        self.Background_Save_Button.setGeometry(QtCore.QRect(460, 390, 88, 28))
        self.Background_Save_Button.setObjectName("Background_Save_Button")
        self.Background_background_color_button = QtWidgets.QPushButton(self.Background)
        self.Background_background_color_button.setGeometry(QtCore.QRect(0, 0, 121, 28))
        self.Background_background_color_button.setObjectName(
            "Background_background_color_button"
        )
        self.Background_background_image_button = QtWidgets.QPushButton(self.Background)
        self.Background_background_image_button.setGeometry(
            QtCore.QRect(0, 30, 121, 28)
        )
        self.Background_background_image_button.setObjectName(
            "Background_background_image_button"
        )
        self.Background_box_color_button = QtWidgets.QPushButton(self.Background)
        self.Background_box_color_button.setGeometry(QtCore.QRect(0, 60, 88, 28))
        self.Background_box_color_button.setObjectName("Background_box_color_button")
        self.Background_text_color_button = QtWidgets.QPushButton(self.Background)
        self.Background_text_color_button.setGeometry(QtCore.QRect(0, 90, 88, 28))
        self.Background_text_color_button.setObjectName("Background_text_color_button")
        self.Background_backround_image_pathtofile = QtWidgets.QTextEdit(
            self.Background
        )
        self.Background_backround_image_pathtofile.setGeometry(
            QtCore.QRect(120, 30, 511, 28)
        )
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.Background_backround_image_pathtofile.sizePolicy().hasHeightForWidth()
        )
        self.Background_backround_image_pathtofile.setSizePolicy(sizePolicy)
        self.Background_backround_image_pathtofile.setAcceptDrops(False)
        self.Background_backround_image_pathtofile.setVerticalScrollBarPolicy(
            QtCore.Qt.ScrollBarAlwaysOff
        )
        self.Background_backround_image_pathtofile.setHorizontalScrollBarPolicy(
            QtCore.Qt.ScrollBarAlwaysOff
        )
        self.Background_backround_image_pathtofile.setReadOnly(True)
        self.Background_backround_image_pathtofile.setObjectName(
            "Background_backround_image_pathtofile"
        )
        self.Background_background_color_label = QtWidgets.QLabel(self.Background)
        self.Background_background_color_label.setGeometry(QtCore.QRect(120, 0, 28, 28))
        self.Background_background_color_label.setText("")
        self.Background_background_color_label.setObjectName(
            "Background_background_color_label"
        )
        self.Background_box_color_label = QtWidgets.QLabel(self.Background)
        self.Background_box_color_label.setGeometry(QtCore.QRect(90, 60, 28, 28))
        self.Background_box_color_label.setText("")
        self.Background_box_color_label.setObjectName("Background_box_color_label")
        self.Background_text_color_label = QtWidgets.QLabel(self.Background)
        self.Background_text_color_label.setGeometry(QtCore.QRect(90, 90, 28, 28))
        self.Background_text_color_label.setText("")
        self.Background_text_color_label.setObjectName("Background_text_color_label")
        self.tabWidget.addTab(self.Background, "")
        self.Windows = QtWidgets.QWidget()
        self.Windows.setObjectName("Windows")
        self.Windows_Close_Button = QtWidgets.QPushButton(self.Windows)
        self.Windows_Close_Button.setGeometry(QtCore.QRect(550, 390, 88, 28))
        self.Windows_Close_Button.setObjectName("Windows_Close_Button")
        self.Windows_Save_Button = QtWidgets.QPushButton(self.Windows)
        self.Windows_Save_Button.setGeometry(QtCore.QRect(460, 390, 88, 28))
        self.Windows_Save_Button.setObjectName("Windows_Save_Button")
        self.Windows_Window_Name = QtWidgets.QTextEdit(self.Windows)
        self.Windows_Window_Name.setGeometry(QtCore.QRect(120, 0, 521, 28))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.Windows_Window_Name.sizePolicy().hasHeightForWidth()
        )
        self.Windows_Window_Name.setSizePolicy(sizePolicy)
        self.Windows_Window_Name.setToolTip("")
        self.Windows_Window_Name.setAccessibleName("")
        self.Windows_Window_Name.setAccessibleDescription("")
        self.Windows_Window_Name.setVerticalScrollBarPolicy(
            QtCore.Qt.ScrollBarAlwaysOff
        )
        self.Windows_Window_Name.setHorizontalScrollBarPolicy(
            QtCore.Qt.ScrollBarAlwaysOff
        )
        self.Windows_Window_Name.setObjectName("Windows_Window_Name")
        self.Windows_Window_Name_Label = QtWidgets.QLabel(self.Windows)
        self.Windows_Window_Name_Label.setGeometry(QtCore.QRect(10, 0, 101, 28))
        self.Windows_Window_Name_Label.setObjectName("Windows_Window_Name_Label")
        self.Account_Manager_Checkbox = QtWidgets.QCheckBox(self.Windows)
        self.Account_Manager_Checkbox.setGeometry(QtCore.QRect(10, 40, 131, 24))
        self.Account_Manager_Checkbox.setChecked(True)
        self.Account_Manager_Checkbox.setObjectName("Account_Manager_Checkbox")
        self.QRCode_Generator_Checkbox = QtWidgets.QCheckBox(self.Windows)
        self.QRCode_Generator_Checkbox.setGeometry(QtCore.QRect(10, 60, 141, 24))
        self.QRCode_Generator_Checkbox.setObjectName("QRCode_Generator_Checkbox")
        self.Youtube_Downloader_Checkbox = QtWidgets.QCheckBox(self.Windows)
        self.Youtube_Downloader_Checkbox.setGeometry(QtCore.QRect(10, 100, 151, 24))
        self.Youtube_Downloader_Checkbox.setObjectName("Youtube_Downloader_Checkbox")
        self.FH4_Drift_Setup_Checkbox = QtWidgets.QCheckBox(self.Windows)
        self.FH4_Drift_Setup_Checkbox.setGeometry(QtCore.QRect(10, 120, 191, 24))
        self.FH4_Drift_Setup_Checkbox.setObjectName("FH4_Drift_Setup_Checkbox")
        self.Password_Generator_Checkbox = QtWidgets.QCheckBox(self.Windows)
        self.Password_Generator_Checkbox.setGeometry(QtCore.QRect(10, 80, 151, 24))
        self.Password_Generator_Checkbox.setObjectName("Password_Generator_Checkbox")
        self.tabWidget.addTab(self.Windows, "")

        self.retranslateUi(Settings)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Settings)

    def retranslateUi(self, Settings):
        _translate = QtCore.QCoreApplication.translate
        Settings.setWindowTitle(_translate("Settings", "Settings"))
        self.Paths_Close_Button.setText(_translate("Settings", "Close"))
        self.Paths_Save_Button.setText(_translate("Settings", "Save"))
        self.Account_Manager_Path.setText(_translate("Settings", "Open"))
        self.Password_Generator_Path_Button.setText(_translate("Settings", "Open"))
        self.QRCode_Generator_Path_Button.setText(_translate("Settings", "Open"))
        self.Youtube_Downloader_Path_Button.setText(_translate("Settings", "Open"))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.Paths), _translate("Settings", "Paths")
        )
        self.Background_Close_Button.setText(_translate("Settings", "Close"))
        self.Background_Save_Button.setText(_translate("Settings", "Save"))
        self.Background_background_color_button.setText(
            _translate("Settings", "Background Color")
        )
        self.Background_background_image_button.setText(
            _translate("Settings", "Background Image")
        )
        self.Background_box_color_button.setText(_translate("Settings", "Box Color"))
        self.Background_text_color_button.setText(_translate("Settings", "Text Color"))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.Background),
            _translate("Settings", "Background"),
        )
        self.Windows_Close_Button.setText(_translate("Settings", "Close"))
        self.Windows_Save_Button.setText(_translate("Settings", "Save"))
        self.Windows_Window_Name_Label.setText(_translate("Settings", "Window Name"))
        self.Account_Manager_Checkbox.setText(_translate("Settings", "Account Manager"))
        self.QRCode_Generator_Checkbox.setText(
            _translate("Settings", "QRCode Generator")
        )
        self.Youtube_Downloader_Checkbox.setText(
            _translate("Settings", "Youtude Downloader")
        )
        # self.FH4_Drift_Setup_Checkbox.setText(
        #   _translate("Settings", "Forza Horizon 4 Drift Setup")
        # )
        self.Password_Generator_Checkbox.setText(
            _translate("Settings", "Password Generator")
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.Windows), _translate("Settings", "Windows")
        )


# =======================================================#

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
